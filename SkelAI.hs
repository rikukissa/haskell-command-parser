module SkelAI where

-- Haskell module generated by the BNF converter

import AbsAI
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transCommand :: Command -> Result
transCommand x = case x of
  HowMany eperson -> failure x
  WhereIs eitem -> failure x
  WhereWasBefore eperson elocation -> failure x
  WhereWasAfter eperson elocation -> failure x
  HowToGo elocation1 elocation2 -> failure x
  EitherIn eperson elocation1 elocation2 -> failure x
  NoLongerIn eperson elocation -> failure x
  IsIn eperson elocation -> failure x
  Dropped eperson eitem -> failure x
  Handed eperson1 eitem eperson2 -> failure x
  Move eperson elocation -> failure x
  Took eperson eitem -> failure x
  IsOf elocation1 edirection elocation2 -> failure x
transELocation :: ELocation -> Result
transELocation x = case x of
  ELocation ident -> failure x
transEItem :: EItem -> Result
transEItem x = case x of
  EItem ident -> failure x
transEDirection :: EDirection -> Result
transEDirection x = case x of
  EWest -> failure x
  EEast -> failure x
  ENorth -> failure x
  ESouth -> failure x
transEPerson :: EPerson -> Result
transEPerson x = case x of
  EPerson ident -> failure x

